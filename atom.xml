<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若懿的个人博客</title>
  
  <subtitle>假装会写代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ruoyi.github.io/"/>
  <updated>2018-08-20T10:00:06.948Z</updated>
  <id>https://ruoyi.github.io/</id>
  
  <author>
    <name>若懿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KVOController源码阅读</title>
    <link href="https://ruoyi.github.io/2018/07/20/KVOController%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://ruoyi.github.io/2018/07/20/KVOController源码阅读/</id>
    <published>2018-07-20T14:57:51.000Z</published>
    <updated>2018-08-20T10:00:06.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>源码: <a href="https://github.com/facebook/KVOController" target="_blank" rel="noopener">https://github.com/facebook/KVOController</a><br>版本: v1.2.0<br>用途: 更加方便的使用 KVO</p></blockquote><h3 id="带着问题读"><a href="#带着问题读" class="headerlink" title="带着问题读"></a>带着问题读</h3><ul><li>如何实现用 <code>Block</code> 代替系统的复杂 <code>API</code></li><li>注意事项</li></ul><h3 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h3><h4 id="FBKVOInfo"><a href="#FBKVOInfo" class="headerlink" title="_FBKVOInfo"></a><strong><code>_FBKVOInfo</code></strong></h4><p><img src="media/15347590338917.jpg" alt=""></p><blockquote><p>相当于一个 <code>Model</code> 来记录相关属性<br><code>_FBKVOSharedController</code>:<br><code>_FBKVOSharedController</code>: </p></blockquote><h3 id="细节学习"><a href="#细节学习" class="headerlink" title="细节学习"></a>细节学习</h3><ul><li>这里用了 <code>copy</code> <img src="./images/KVOControllerCopyPath.jpeg" alt=""></li><li><code>pthread_mutex_t</code> 线程锁不属于 <code>UIKit</code> 和 <code>Foundation</code> 对象生命周期需要手动管理<br><img src="./images/屏幕快照 2018-08-20 下午5.34.29.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;源码: &lt;a href=&quot;https://github.com/facebook/KVOController&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/KVOContro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DispatchQueue.init 思考</title>
    <link href="https://ruoyi.github.io/2018/07/20/DispatchQueue-init-%E6%80%9D%E8%80%83/"/>
    <id>https://ruoyi.github.io/2018/07/20/DispatchQueue-init-思考/</id>
    <published>2018-07-20T03:48:03.000Z</published>
    <updated>2018-08-20T08:22:43.130Z</updated>
    
    <content type="html"><![CDATA[<p>线程队列的创建同常用下面这个函数创建，这几个参数很有意思，我们来慢慢解读</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(label: <span class="type">String</span>,</span><br><span class="line">                          qos: <span class="type">DispatchQoS</span> = <span class="keyword">default</span>,</span><br><span class="line">                   attributes: <span class="type">DispatchQueue</span>.<span class="type">Attributes</span> = <span class="keyword">default</span>,</span><br><span class="line">         autoreleaseFrequency: <span class="type">DispatchQueue</span>.<span class="type">AutoreleaseFrequency</span> = <span class="keyword">default</span>,</span><br><span class="line">                       target: <span class="type">DispatchQueue</span>? = <span class="keyword">default</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Parameter: label<br>Parameter: qos<br>Parameter: attributes</p></blockquote><p>前三个参数请参考，这里讲解的很详细了。 <a href="https://swift.gg/2016/11/30/grand-central-dispatch" target="_blank" rel="noopener">Swift 3 中的 GCD 与 Dispatch Queue</a></p><h3 id="参数-autoreleaseFrequency"><a href="#参数-autoreleaseFrequency" class="headerlink" title="参数 autoreleaseFrequency:"></a>参数 autoreleaseFrequency:</h3><p>由参数名我们可以看，这个参数和内存管理有关</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">AutoreleaseFrequency</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承？ 继承谁的？</span></span><br><span class="line">    <span class="keyword">case</span> inherit</span><br><span class="line">    <span class="comment">// 为每个 workItem 创建一个自动释放池</span></span><br><span class="line">    <span class="meta">@available</span>(<span class="type">OSX</span> <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">    <span class="keyword">case</span> workItem</span><br><span class="line">    <span class="comment">// 从不创建自动释放池</span></span><br><span class="line">    <span class="meta">@available</span>(<span class="type">OSX</span> <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">    <span class="keyword">case</span> never</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>系统在每个runloop迭代中都加入了自动释放池Push和Pop。<a href="https://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="noopener">黑幕背后的Autorelease</a></p></blockquote><p>但是由于在多线程中 <code>Runloop</code> 是属于懒加载的模式，如果不是我们手动调用的话是不会创建 <code>Runloop</code> 的。<br>所以这个参数非常重要，根据定义我们知道 <code>workItem</code> 为每个 workItem 创建一个自动释放池， <code>never</code> 不会创建自动释放池， 那 <code>inherit</code> 呢？参考<a href="https://juejin.im/post/5a0c5b6af265da431e164e17" target="_blank" rel="noopener">各个线程 Autorelease 对象的内存管理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线程队列的创建同常用下面这个函数创建，这几个参数很有意思，我们来慢慢解读&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Runtime 实现懒加载</title>
    <link href="https://ruoyi.github.io/2017/07/20/Runtime-Lazy-Property/"/>
    <id>https://ruoyi.github.io/2017/07/20/Runtime-Lazy-Property/</id>
    <published>2017-07-20T13:48:03.000Z</published>
    <updated>2018-08-20T09:04:13.019Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中很多时候会用到懒加载, 很多重复性质的操作.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (Type *)properrtyName &#123;</span><br><span class="line">    <span class="keyword">if</span> (_name == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _name = [Type new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>通过 <code>Runtime</code> 对未重写 <code>get</code> 方法的懒加载属性, 进行方法替换</li><li>当调用懒加载的属性，通过 <code>object_getIvar</code> 看这个属性是否为<code>nil</code><br>如果不为空的话，直接返回，获得值</li><li>如果为空的话，则检测该类是否重写了 <code>set</code> 方法，如果重写就通过 <code>NSInvocation</code> 调用重写的 <code>set</code> 方法。如果没有重写的话就 通过 <code>object_setIvar</code> 为这个懒加载属性设置 <code>Ivar</code>(注意调用<code>willChangeValueForKey</code>, <code>didChangeValueForKey</code>)</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://github.com/ruoyi/RYLazyProperty" target="_blank" rel="noopener">一行代码解决懒加载</a></p><p>使用方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Animal ry_setLazyPropertyArr:@[<span class="string">@"name"</span>,<span class="string">@"foots"</span>,<span class="string">@"attribute"</span>,]];</span><br><span class="line">[ViewController ry_setLazyPropertyArr:@[<span class="string">@"animal"</span>]];</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>本代码未对线程安全做任何处理，请自行解决🙂</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101" target="_blank" rel="noopener">Declared Properties</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-TPXREF163" target="_blank" rel="noopener">Using Hidden Arguments : _cmd</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发过程中很多时候会用到懒加载, 很多重复性质的操作.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
  </entry>
  
</feed>
