<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若懿的个人博客</title>
  
  <subtitle>假装会写代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ruoyi.github.io/"/>
  <updated>2018-08-22T01:50:39.717Z</updated>
  <id>https://ruoyi.github.io/</id>
  
  <author>
    <name>若懿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KVOController源码学习</title>
    <link href="https://ruoyi.github.io/2018/07/20/KVOController%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://ruoyi.github.io/2018/07/20/KVOController源码阅读/</id>
    <published>2018-07-20T14:57:51.000Z</published>
    <updated>2018-08-22T01:50:39.717Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>源码: <a href="https://github.com/facebook/KVOController" target="_blank" rel="noopener">https://github.com/facebook/KVOController</a><br>版本: v1.2.0<br>用途: 更加方便的使用 KVO</p></blockquote><h3 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h3><h4 id="FBKVOInfo"><a href="#FBKVOInfo" class="headerlink" title="_FBKVOInfo"></a><strong><code>_FBKVOInfo</code></strong></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">@public</span></span><br><span class="line">  __<span class="keyword">weak</span> FBKVOController *_controller; <span class="comment">// 防止观察者释放了然而_controller没有释放</span></span><br><span class="line">  <span class="built_in">NSString</span> *_keyPath;</span><br><span class="line">  <span class="built_in">NSKeyValueObservingOptions</span> _options;</span><br><span class="line">  SEL _action;</span><br><span class="line">  <span class="keyword">void</span> *_context;</span><br><span class="line">  FBKVONotificationBlock _block;</span><br><span class="line">  _FBKVOInfoState _state;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithController:(FBKVOController *)controller</span><br><span class="line">                           keyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                           options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</span><br><span class="line">                             block:(<span class="keyword">nullable</span> FBKVONotificationBlock)block</span><br><span class="line">                            action:(<span class="keyword">nullable</span> SEL)action</span><br><span class="line">                           context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != <span class="keyword">self</span>) &#123;</span><br><span class="line">    _controller = controller; <span class="comment">// FBKVOController(包含观察者用于SEL的回调)</span></span><br><span class="line">    _block = [block <span class="keyword">copy</span>]; <span class="comment">// 三种回调方式中的Block</span></span><br><span class="line">    _keyPath = [keyPath <span class="keyword">copy</span>]; <span class="comment">// KVO的 forKeyPath</span></span><br><span class="line">    _options = options;</span><br><span class="line">    _action = action; <span class="comment">// 三种回调方式中的SEL</span></span><br><span class="line">    _context = context; <span class="comment">// 三种回调方式中自己实现observeValueForKeyPath的context</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相当于一个 <code>Model</code> 来记录相关属性<br>重写 <code>- (NSUInteger)hash</code> 函数, 防止在集合类型中添加重复的 <code>_keyPath</code><br>重写 <code>- (BOOL)isEqual:(id)object</code> 进行对象的判等</p></blockquote><h4 id="FBKVOSharedController"><a href="#FBKVOSharedController" class="headerlink" title="_FBKVOSharedController"></a><strong><code>_FBKVOSharedController</code></strong></h4><blockquote><p>事件的逻辑处理</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看似很长其实也不多</span></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                      ofObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object</span><br><span class="line">                        change:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)change</span><br><span class="line">                       context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">NSAssert</span>(context, <span class="string">@"missing context keyPath:%@ object:%@ change:%@"</span>, keyPath, object, change);</span><br><span class="line"></span><br><span class="line">  _FBKVOInfo *info;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// lookup context in registered infos, taking out a strong reference only if it exists</span></span><br><span class="line">    pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">    info = [_infos member:(__bridge <span class="keyword">id</span>)context];</span><br><span class="line">    pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != info) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// take strong reference to controller</span></span><br><span class="line">    FBKVOController *controller = info-&gt;_controller;</span><br><span class="line">    <span class="comment">// 由于 _FBKVOSharedController 是单例 不会释放，观察者可能释放掉了进而释放了FBKVOController</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> != controller) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// take strong reference to observer</span></span><br><span class="line">      <span class="keyword">id</span> observer = controller.observer;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">nil</span> != observer) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dispatch custom block or action, fall back to default action</span></span><br><span class="line">        <span class="keyword">if</span> (info-&gt;_block) &#123;</span><br><span class="line">          <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *changeWithKeyPath = change;</span><br><span class="line">          <span class="comment">// add the keyPath to the change dictionary for clarity when mulitple keyPaths are being observed</span></span><br><span class="line">          <span class="keyword">if</span> (keyPath) &#123;</span><br><span class="line">            <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *mChange = [<span class="built_in">NSMutableDictionary</span> dictionaryWithObject:keyPath forKey:FBKVONotificationKeyPathKey];</span><br><span class="line">            [mChange addEntriesFromDictionary:change];</span><br><span class="line">            changeWithKeyPath = [mChange <span class="keyword">copy</span>];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//第一种处理方式 Block 回调</span></span><br><span class="line">          info-&gt;_block(observer, object, changeWithKeyPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info-&gt;_action) &#123;</span><br><span class="line">        <span class="comment">// 写给编译器看的 去除"-Warc-performSelector-leaks"警告</span></span><br><span class="line">        <span class="comment">// 参考 https://nshipster.cn/pragma/</span></span><br><span class="line"><span class="meta">#pragma clang diagnostic push</span></span><br><span class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></span><br><span class="line">        <span class="comment">//第二种处理方式</span></span><br><span class="line">          [observer performSelector:info-&gt;_action withObject:change withObject:object];</span><br><span class="line"><span class="meta">#pragma clang diagnostic pop</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//第三种处理方式</span></span><br><span class="line">          [observer observeValueForKeyPath:keyPath ofObject:object change:change context:info-&gt;_context];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FBKVOController"><a href="#FBKVOController" class="headerlink" title="FBKVOController"></a><strong><code>FBKVOController</code></strong></h4><blockquote><p>接口类<br>做一些校验类工作</p></blockquote><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><ol><li>为 <code>NSObject</code> 添加关联属性 <code>KVOController</code> (会对所观察的 <code>Object</code> 做 <code>Retain</code> 操作), <code>KVOControllerNonRetaining</code> (不会对所观察的 <code>Object</code> 做 <code>Retain</code> 操作)</li><li>通过 <code>FBKVOController</code> 接口类, 做一些参数校验，并生成 <code>_FBKVOInfo</code> 添加到 <code>_FBKVOSharedController</code> 这个单例当中</li><li><code>_FBKVOSharedController</code> 实现 <code>- (void)observeValueForKeyPath:(nullable NSString *)keyPath ofObject:(nullable id)object change:(nullable NSDictionary&lt;NSKeyValueChangeKey, id&gt; *)change context:(nullable void *)context;</code> 并根据 <code>context</code> 找到相关回调并执行</li></ol><h3 id="细节学习"><a href="#细节学习" class="headerlink" title="细节学习"></a>细节学习</h3><h4 id="这里用了-copy"><a href="#这里用了-copy" class="headerlink" title="这里用了 copy"></a>这里用了 <code>copy</code></h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithController:(FBKVOController *)controller</span><br><span class="line">                           keyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                           options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</span><br><span class="line">                             block:(<span class="keyword">nullable</span> FBKVONotificationBlock)block</span><br><span class="line">                            action:(<span class="keyword">nullable</span> SEL)action</span><br><span class="line">                           context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != <span class="keyword">self</span>) &#123; </span><br><span class="line">    _controller = controller;</span><br><span class="line">    _block = [block <span class="keyword">copy</span>];</span><br><span class="line">    _keyPath = [keyPath <span class="keyword">copy</span>]; <span class="comment">//防止传入的对象是 NSMutableString</span></span><br><span class="line">    _options = options;</span><br><span class="line">    _action = action;</span><br><span class="line">    _context = context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="KVOController-不属于-UI-控件-涉及多线程所以需要保证线程安全-对在多线程访问的变量加锁"><a href="#KVOController-不属于-UI-控件-涉及多线程所以需要保证线程安全-对在多线程访问的变量加锁" class="headerlink" title="KVOController 不属于 UI 控件, 涉及多线程所以需要保证线程安全, 对在多线程访问的变量加锁"></a>KVOController 不属于 <code>UI</code> 控件, 涉及多线程所以需要保证线程安全, 对在多线程访问的变量加锁</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)_observe:(<span class="keyword">id</span>)object info:(_FBKVOInfo *)info</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 加锁</span></span><br><span class="line">  pthread_mutex_lock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">NSMutableSet</span> *infos = [_objectInfosMap objectForKey:object];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查是否添加过这个 keyPath, 防止重复添加</span></span><br><span class="line">  _FBKVOInfo *existingInfo = [infos member:info];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != existingInfo) &#123;</span><br><span class="line">    <span class="comment">// observation info already exists; do not observe it again</span></span><br><span class="line">    <span class="comment">// unlock and return</span></span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 懒加载</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == infos) &#123;</span><br><span class="line">    infos = [<span class="built_in">NSMutableSet</span> set];</span><br><span class="line">    [_objectInfosMap setObject:infos forKey:object];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add info and oberve</span></span><br><span class="line">  [infos addObject:info];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// unlock prior to callout</span></span><br><span class="line">  pthread_mutex_unlock(&amp;_lock);</span><br><span class="line"><span class="comment">// 添加到事件处理类当中</span></span><br><span class="line">  [[_FBKVOSharedController sharedController] observe:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多锁参考 <a href="https://www.jianshu.com/p/ddbe44064ca4" target="_blank" rel="noopener">iOS 常见知识点（三）：Lock</a></p><h4 id="pthread-mutex-t-线程锁不属于-UIKit-和-Foundation-对象生命周期需要手动管理"><a href="#pthread-mutex-t-线程锁不属于-UIKit-和-Foundation-对象生命周期需要手动管理" class="headerlink" title="pthread_mutex_t 线程锁不属于 UIKit 和 Foundation 对象生命周期需要手动管理"></a><code>pthread_mutex_t</code> 线程锁不属于 <code>UIKit</code> 和 <code>Foundation</code> 对象生命周期需要手动管理</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    pthread_mutex_destroy(&amp;_mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NSMap​Table-amp-NSHash​Table-对容器内的属性可以不增加引用计数"><a href="#NSMap​Table-amp-NSHash​Table-对容器内的属性可以不增加引用计数" class="headerlink" title="NSMap​Table &amp; NSHash​Table 对容器内的属性可以不增加引用计数"></a><a href="https://developer.apple.com/documentation/foundation/nsmaptable" target="_blank" rel="noopener">NSMap​Table</a> &amp; <a href="https://developer.apple.com/documentation/foundation/nshashtable" target="_blank" rel="noopener">NSHash​Table</a> 对容器内的属性可以不增加引用计数</h4><p>使用方法, 参考<a href="https://nshipster.cn/nshashtable-and-nsmaptable/" target="_blank" rel="noopener">https://nshipster.cn/nshashtable-and-nsmaptable/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;源码: &lt;a href=&quot;https://github.com/facebook/KVOController&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/KVOContro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DispatchQueue.init 思考</title>
    <link href="https://ruoyi.github.io/2018/07/20/DispatchQueue-init-%E6%80%9D%E8%80%83/"/>
    <id>https://ruoyi.github.io/2018/07/20/DispatchQueue-init-思考/</id>
    <published>2018-07-20T03:48:03.000Z</published>
    <updated>2018-08-20T08:22:43.130Z</updated>
    
    <content type="html"><![CDATA[<p>线程队列的创建同常用下面这个函数创建，这几个参数很有意思，我们来慢慢解读</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(label: <span class="type">String</span>,</span><br><span class="line">                          qos: <span class="type">DispatchQoS</span> = <span class="keyword">default</span>,</span><br><span class="line">                   attributes: <span class="type">DispatchQueue</span>.<span class="type">Attributes</span> = <span class="keyword">default</span>,</span><br><span class="line">         autoreleaseFrequency: <span class="type">DispatchQueue</span>.<span class="type">AutoreleaseFrequency</span> = <span class="keyword">default</span>,</span><br><span class="line">                       target: <span class="type">DispatchQueue</span>? = <span class="keyword">default</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Parameter: label<br>Parameter: qos<br>Parameter: attributes</p></blockquote><p>前三个参数请参考，这里讲解的很详细了。 <a href="https://swift.gg/2016/11/30/grand-central-dispatch" target="_blank" rel="noopener">Swift 3 中的 GCD 与 Dispatch Queue</a></p><h3 id="参数-autoreleaseFrequency"><a href="#参数-autoreleaseFrequency" class="headerlink" title="参数 autoreleaseFrequency:"></a>参数 autoreleaseFrequency:</h3><p>由参数名我们可以看，这个参数和内存管理有关</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">AutoreleaseFrequency</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承？ 继承谁的？</span></span><br><span class="line">    <span class="keyword">case</span> inherit</span><br><span class="line">    <span class="comment">// 为每个 workItem 创建一个自动释放池</span></span><br><span class="line">    <span class="meta">@available</span>(<span class="type">OSX</span> <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">    <span class="keyword">case</span> workItem</span><br><span class="line">    <span class="comment">// 从不创建自动释放池</span></span><br><span class="line">    <span class="meta">@available</span>(<span class="type">OSX</span> <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">    <span class="keyword">case</span> never</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>系统在每个runloop迭代中都加入了自动释放池Push和Pop。<a href="https://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="noopener">黑幕背后的Autorelease</a></p></blockquote><p>但是由于在多线程中 <code>Runloop</code> 是属于懒加载的模式，如果不是我们手动调用的话是不会创建 <code>Runloop</code> 的。<br>所以这个参数非常重要，根据定义我们知道 <code>workItem</code> 为每个 workItem 创建一个自动释放池， <code>never</code> 不会创建自动释放池， 那 <code>inherit</code> 呢？参考<a href="https://juejin.im/post/5a0c5b6af265da431e164e17" target="_blank" rel="noopener">各个线程 Autorelease 对象的内存管理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线程队列的创建同常用下面这个函数创建，这几个参数很有意思，我们来慢慢解读&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Runtime 实现懒加载</title>
    <link href="https://ruoyi.github.io/2017/07/20/Runtime-Lazy-Property/"/>
    <id>https://ruoyi.github.io/2017/07/20/Runtime-Lazy-Property/</id>
    <published>2017-07-20T13:48:03.000Z</published>
    <updated>2018-08-20T09:04:13.019Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中很多时候会用到懒加载, 很多重复性质的操作.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (Type *)properrtyName &#123;</span><br><span class="line">    <span class="keyword">if</span> (_name == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _name = [Type new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>通过 <code>Runtime</code> 对未重写 <code>get</code> 方法的懒加载属性, 进行方法替换</li><li>当调用懒加载的属性，通过 <code>object_getIvar</code> 看这个属性是否为<code>nil</code><br>如果不为空的话，直接返回，获得值</li><li>如果为空的话，则检测该类是否重写了 <code>set</code> 方法，如果重写就通过 <code>NSInvocation</code> 调用重写的 <code>set</code> 方法。如果没有重写的话就 通过 <code>object_setIvar</code> 为这个懒加载属性设置 <code>Ivar</code>(注意调用<code>willChangeValueForKey</code>, <code>didChangeValueForKey</code>)</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://github.com/ruoyi/RYLazyProperty" target="_blank" rel="noopener">一行代码解决懒加载</a></p><p>使用方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Animal ry_setLazyPropertyArr:@[<span class="string">@"name"</span>,<span class="string">@"foots"</span>,<span class="string">@"attribute"</span>,]];</span><br><span class="line">[ViewController ry_setLazyPropertyArr:@[<span class="string">@"animal"</span>]];</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>本代码未对线程安全做任何处理，请自行解决🙂</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101" target="_blank" rel="noopener">Declared Properties</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-TPXREF163" target="_blank" rel="noopener">Using Hidden Arguments : _cmd</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发过程中很多时候会用到懒加载, 很多重复性质的操作.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>再看ViewController生命周期</title>
    <link href="https://ruoyi.github.io/2017/07/10/%E5%86%8D%E7%9C%8BViewController%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://ruoyi.github.io/2017/07/10/再看ViewController生命周期/</id>
    <published>2017-07-10T14:09:06.000Z</published>
    <updated>2018-08-29T01:36:07.043Z</updated>
    
    <content type="html"><![CDATA[<p>首先看一段代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LabelViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span> *label;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LabelViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UILabel</span> *)label &#123;</span><br><span class="line">    <span class="keyword">if</span> (_label == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _label = [[<span class="built_in">UILabel</span> alloc]initWithFrame: <span class="keyword">self</span>.view.bounds];</span><br><span class="line">        _label.backgroundColor = <span class="built_in">UIColor</span>.yellowColor;</span><br><span class="line">        _label.textColor = <span class="built_in">UIColor</span>.blueColor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.label];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是ViewController(有navigationController)中的一个函数，当调用这个函数的时候, label中的文字会显示吗? 请思考1分钟 </span></span><br><span class="line">- (<span class="keyword">void</span>)pushLableViewControllerAction &#123;</span><br><span class="line">    LabelViewController *labelController = [[LabelViewController alloc] init];</span><br><span class="line">    labelController.label.text = <span class="string">@"我会显示吗"</span>;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:labelController</span><br><span class="line">                                         animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是 <code>label</code> 中的文字没有显示, 我们来找一下原因</p><p>首先我们先看一下 <code>UIViewController</code> 加载的生命周期</p><p><img src="./images/1354776680_2123.png" alt=""></p><p>然后我写一下关键时刻的调用栈就清楚原因了。</p><ul><li><code>-[LabelViewController label]</code> //这时候 <code>view</code> 已经加载过了, 当这个函数调用完成后就应该出栈了</li><li><code>-[LabelViewController.view addSubview:self.label]</code></li><li><code>-[LabelViewController viewDidLoad]</code> // <code>-[LabelViewController label]</code> 没有执行完成, <code>label</code> 还为空 </li><li><code>-[LabelViewController view]</code> // 由于调用了 <code>self.view</code> 方法这时候 <code>view</code> 为空</li><li><code>-[LabelViewController label]</code> // 只是执行到了 <code>[[UILabel alloc]initWithFrame: self.view.bounds];</code></li><li><code>-[ViewController pushLableViewControllerAction]</code></li></ul><p>我们分析出添加到 <code>view</code> 上的是一个对象, 而 <code>LabelViewController</code> 拥有的是另一个对象，所以设置的 <code>label</code> 中的文字是不会显示的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先看一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
